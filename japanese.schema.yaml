# Rime schema
# vim: set sw=2 sts=2 et:
# encoding: utf-8

schema:
  schema_id: japanese
  name: 日本語入力
  version: 'v1.0 2023.4.10'
  author:
    - ensigma96 <ensigma96@gmail.com>
  dependencies:

switches:
  - name: ascii_mode
    reset: 0
    states: [ 日语, 英文 ]
  - name: full_shape
    states: [ 半角, 全角 ]
  - name: ascii_punct
    states: [ 。，, ．， ]
  - name: emoji_jp
    reset: 1
    states: [ "😭️", "😄️" ]

engine:
  processors:
    - ascii_composer
    - recognizer
    - key_binder
    - speller
    - punctuator
    - selector
    - navigator
    - express_editor
  segmentors:
    - ascii_segmentor
    - matcher
    - abc_segmentor
    - punct_segmentor
    - fallback_segmentor
  translators:
    - punct_translator
    - script_translator
    - reverse_lookup_translator
    # - table_translator@custom_phrase  # 添加 调用custom_phrase自定义短语
    - lua_translator@date_translator  # 添加 调用Rime-lua插件，自定义系统变量输出日期、星期、时间类型输出
    # - lua_translator@calculator_translator # 添加 简易计算器lua，按符号"="激活计算器
  filters:
    # - simplifier
    - uniquifier
    - simplifier@emoji_jp

speller:
  alphabet: zyxwvutsrqponmlkjihgfedcba:,.!()/-=_+    #'zyxwvutsrqponmlkjihgfedcba-_'
  delimiter: " '"  #"，"逗号分词
  algebra:
  # 特殊假名处理
    # - xform/[aiueo]ly/y/
    # - xform/[aiueo]lw/w/
    # - xform/ltu([a-z])/$1$1/
    # - xform/[aiueo]l([aiueo])/$1/

    # 长音符号
    # - xform/ー/-
    # 基础（简拼）
    # - abbrev/^([a-z]).+$/$1/
    # - abbrev/^([zcs]h).+$/$1/

    # 兼容其他拼写方式
    - derive/-/q/      # q => -
    - derive/fu/hu/  # fu
    - derive/chi/ti/
    - derive/tsu/tu/  # tsu
    - derive/shi/si/  #し

    # 小字母
    - derive/x/l/              # l = x
    # - derive/ly([auo])/xy$1/   # lya lyu lyo  => xya xyu xyo
    # - derive/xy([auo])/ly$1/   # xya xyu xyo  => lya lyu lyo
    # - derive/ltu/xtu/
    # - derive/lwa/xwa/
    # 促音っ
    # - derive/^([kgptsdhbrjzv])\1([aiueo])/ltu$1$2/
    # - derive/([t])\1(su)/ltu$1$2/
    # - derive/^([kszcnhbprftd])\1y([auo])/ltu$1y$2/  # 
    # - derive/([kg])\1w([aiueo])/ltu$1w$2/  # 
    # - derive/([f])\1([aieuo])/ltu$1$2/  # ffa ffi ffe ffo
    # - derive/s(shi)/ltu$1/
    # - derive/tch([eauo])/ltuch$1/  # tche tcha tchu tcho

    # - derive/zi/ji/
    # - derive/zy([auo])/j$1/
    - derive/sy([auo])/sh$1/
    # - derive/^nn$/n/


translator:
  dictionary: japanese
  spelling_hints: 15        # 設定多少字以內候選標註完整帶調拼音〔僅script_translator有效〕
  enable_completion: true   # 提前显示尚未输入完整码的字〔true 或 false〕编码逐渐提示开关；编码提示
  enable_sentence: true     # 是否开启自动造句〔true 或 false〕
  comment_format:
    - 'xlit|q|ー|'
  preedit_format:
    # - xform/(^|\s)ten/・/
    # - xform/(^|\s)symbol/々/
    - xform/(^|\s)-/ー/
    - xform/(^|\s)q/ー/
    - xform/(^|\s)~/〜/


# 自定义短语 Custom_phrase.txt # Tab 不能用空格代替
# custom_phrase:
#   dictionary: ""
#   user_dict: custom_phrase     #设定用户词典名
#   db_class: stabledb           #设定用户词典类型，可设 tabledb〔文本〕或 userdb〔二进制〕
#   enable_completion: false     #提前显示尚未输入完整码的字〔true 或 false〕
#   enable_sentence: false       #是否开启自动造句〔true 或 false〕
#   initial_quality: 1           #设定此翻译器结果优先级，如果想要自定义的词排在前面，这个值尽量设大一点
  
# 日语版的emoji表情
emoji_jp:
  opencc_config: emoji_Japanese.json
  option_name: emoji_jp
  tips: all

# reverse_lookup:
#   dictionary: japanese
#   prefix: "`"
#   suffix: "'"
#   tips: 〔日语〕
#   preedit_format:


punctuator:
  import_preset: symbols_custom_ja
  # __include: symbols_custom_ja:/

recognizer:
  import_preset: default
  patterns:
    reverse_lookup: "`[a-z]*'?$"
    email: "^[A-Za-z][-_.0-9A-Za-z]*@.*$"                            # 自带的，e-mail 正则
    # uppercase: "[A-Z][-_+.'0-9A-Za-z]*$"                           # 自带的，大写字母开头后，可以输入[-_+.'0-9A-Za-z]这些字符
    url: "^(www[.]|https?:|ftp[.:]|mailto:|file:).*$|^[a-z]+[.].+$"  # 自带的，URL 正则
    url_2: "^[A-Za-z]+[.].*"          # 支持 google.com abc.txt 等网址或文件名，会导致句号不会让句子上屏，或使用句号翻页时需要注释掉
    win_path: "^[A-Za-z]:.*"          # 支持 c:\file\path 之类的路径输入
    colon: "^[A-Za-z]+:.*"            # 上面的超集，可以输入冒号，不会导致句子直接上屏
    underscore: "^[A-Za-z]+_.*"       # 可以输入下划线 _ ，不会导致句子直接上屏
    punct: "^v([0-9]|10|[A-Za-z]+)$"  # 响应 symbols_custom_ja.yaml 下的 punctuator/symbols，用「v」替换「/」并支持大写
    unicode: "^U[a-f0-9]+"            # 响应 Unicode
    # expression: "^=.*$"  #计算器lua = 引导,

key_binder:
  import_preset: default
  # bindings:
  # 设置哪些键可以翻页，需要哪个取消注释即可
    # # 自定义
    # - {accept: "~", send: "Shift+Right", when: has_menu}  #手机上用  切换编码切分
    # - {accept: "'", send: "Shift+Delete", when: has_menu}  #手机上用  删词
    # - { when: has_menu, accept: "#", toggle: emoji_suggestion } # 手机上用：在输入过程中，切换Emoji开关的快捷键，这里用#号切换
    # - { when: always, accept: "^", select: .next }   #手机上用切换输入法

    # - { when: has_menu, accept: "#", toggle: emoji_jp } # 在输入过程中，切换Emoji开关的快捷键，这里用#号切换
    # - { when: has_menu, accept: "F6", toggle: emoji_jp } # window在输入过程中，用F6快捷键，切换Emoji开关
    # - { when: always, accept: Control+Shift+space, select: .next }